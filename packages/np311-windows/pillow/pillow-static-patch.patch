diff --git a/src/Tk/tkImaging.c b/src/Tk/tkImaging.c
index a36c3e0..a1bab0d 100644
--- a/src/Tk/tkImaging.c
+++ b/src/Tk/tkImaging.c
@@ -220,80 +220,23 @@ TkImaging_Init(Tcl_Interp *interp) {
 
 #define TKINTER_FINDER "PIL._tkinter_finder"
 
-#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__CYGWIN__)
+extern Tcl_Command	Tcl_CreateCommand(Tcl_Interp *interp,
+				const char *cmdName, Tcl_CmdProc *proc,
+				void *clientData,
+				Tcl_CmdDeleteProc *deleteProc);
 
-/*
- * On Windows, we can't load the tkinter module to get the Tcl or Tk symbols,
- * because Windows does not load symbols into the library name-space of
- * importing modules. So, knowing that tkinter has already been imported by
- * Python, we scan all modules in the running process for the Tcl and Tk
- * function names.
- */
-#include <windows.h>
-#define PSAPI_VERSION 1
-#include <psapi.h>
-/* Must be linked with 'psapi' library */
-
-#define TKINTER_PKG "tkinter"
+extern void		Tcl_AppendResult(Tcl_Interp *interp, ...);
 
-FARPROC
-_dfunc(HMODULE lib_handle, const char *func_name) {
-    /*
-     * Load function `func_name` from `lib_handle`.
-     * Set Python exception if we can't find `func_name` in `lib_handle`.
-     * Returns function pointer or NULL if not present.
-     */
-
-    char message[100];
-
-    FARPROC func = GetProcAddress(lib_handle, func_name);
-    if (func == NULL) {
-        sprintf(message, "Cannot load function %s", func_name);
-        PyErr_SetString(PyExc_RuntimeError, message);
-    }
-    return func;
-}
+extern int		Tk_PhotoPutBlock(Tcl_Interp *interp,
+				Tk_PhotoHandle handle,
+				Tk_PhotoImageBlock *blockPtr, int x, int y,
+				int width, int height, int compRule);
 
-int
-get_tcl(HMODULE hMod) {
-    /*
-     * Try to fill Tcl global vars with function pointers. Return 0 for no
-     * functions found, 1 for all functions found, -1 for some but not all
-     * functions found.
-     */
+extern int		Tk_PhotoGetImage(Tk_PhotoHandle handle,
+				Tk_PhotoImageBlock *blockPtr);
 
-    if ((TCL_CREATE_COMMAND =
-             (Tcl_CreateCommand_t)GetProcAddress(hMod, "Tcl_CreateCommand")) == NULL) {
-        return 0; /* Maybe not Tcl module */
-    }
-    return ((TCL_APPEND_RESULT =
-                 (Tcl_AppendResult_t)_dfunc(hMod, "Tcl_AppendResult")) == NULL)
-               ? -1
-               : 1;
-}
-
-int
-get_tk(HMODULE hMod) {
-    /*
-     * Try to fill Tk global vars with function pointers. Return 0 for no
-     * functions found, 1 for all functions found, -1 for some but not all
-     * functions found.
-     */
-
-    FARPROC func = GetProcAddress(hMod, "Tk_PhotoPutBlock");
-    if (func == NULL) { /* Maybe not Tk module */
-        return 0;
-    }
-    if ((TK_PHOTO_GET_IMAGE = (Tk_PhotoGetImage_t)_dfunc(hMod, "Tk_PhotoGetImage")) ==
-        NULL) {
-        return -1;
-    };
-    if ((TK_FIND_PHOTO = (Tk_FindPhoto_t)_dfunc(hMod, "Tk_FindPhoto")) == NULL) {
-        return -1;
-    };
-    TK_PHOTO_PUT_BLOCK = (Tk_PhotoPutBlock_t)func;
-    return 1;
-}
+extern Tk_PhotoHandle	Tk_FindPhoto(Tcl_Interp *interp,
+				const char *imageName);
 
 int
 load_tkinter_funcs(void) {
@@ -302,176 +245,11 @@ load_tkinter_funcs(void) {
      * Return 0 for success, non-zero for failure.
      */
 
-    HMODULE *hMods = NULL;
-    HANDLE hProcess;
-    DWORD cbNeeded;
-    unsigned int i;
-    int found_tcl = 0;
-    int found_tk = 0;
-
-    /* First load tkinter module to make sure libraries are loaded */
-    PyObject *pModule = PyImport_ImportModule(TKINTER_PKG);
-    if (pModule == NULL) {
-        return 1;
-    }
-    Py_DECREF(pModule);
-
-    /* Returns pseudo-handle that does not need to be closed */
-    hProcess = GetCurrentProcess();
-
-    /* Allocate module handlers array */
-    if (!EnumProcessModules(hProcess, NULL, 0, &cbNeeded)) {
-#if defined(__CYGWIN__)
-        PyErr_SetString(PyExc_OSError, "Call to EnumProcessModules failed");
-#else
-        PyErr_SetFromWindowsErr(0);
-#endif
-        return 1;
-    }
-    if (!(hMods = (HMODULE *)malloc(cbNeeded))) {
-        PyErr_NoMemory();
-        return 1;
-    }
+    TCL_CREATE_COMMAND = Tcl_CreateCommand;
+    TCL_APPEND_RESULT = Tcl_AppendResult;
+    TK_PHOTO_PUT_BLOCK = Tk_PhotoPutBlock;
+    TK_PHOTO_GET_IMAGE = Tk_PhotoGetImage;
+    TK_FIND_PHOTO = Tk_FindPhoto;
 
-    /* Iterate through modules in this process looking for Tcl / Tk names */
-    if (EnumProcessModules(hProcess, hMods, cbNeeded, &cbNeeded)) {
-        for (i = 0; i < (cbNeeded / sizeof(HMODULE)); i++) {
-            if (!found_tcl) {
-                found_tcl = get_tcl(hMods[i]);
-                if (found_tcl == -1) {
-                    break;
-                }
-            }
-            if (!found_tk) {
-                found_tk = get_tk(hMods[i]);
-                if (found_tk == -1) {
-                    break;
-                }
-            }
-            if (found_tcl && found_tk) {
-                break;
-            }
-        }
-    }
-
-    free(hMods);
-    if (found_tcl == 0) {
-        PyErr_SetString(PyExc_RuntimeError, "Could not find Tcl routines");
-    } else if (found_tk == 0) {
-        PyErr_SetString(PyExc_RuntimeError, "Could not find Tk routines");
-    }
-    return (int)((found_tcl != 1) || (found_tk != 1));
-}
-
-#else /* not Windows */
-
-/*
- * On Unix, we can get the Tcl and Tk symbols from the tkinter module, because
- * tkinter uses these symbols, and the symbols are therefore visible in the
- * tkinter dynamic library (module).
- */
-
-#include <dlfcn.h>
-
-void *
-_dfunc(void *lib_handle, const char *func_name) {
-    /*
-     * Load function `func_name` from `lib_handle`.
-     * Set Python exception if we can't find `func_name` in `lib_handle`.
-     * Returns function pointer or NULL if not present.
-     */
-
-    void *func;
-    /* Reset errors. */
-    dlerror();
-    func = dlsym(lib_handle, func_name);
-    if (func == NULL) {
-        const char *error = dlerror();
-        PyErr_SetString(PyExc_RuntimeError, error);
-    }
-    return func;
-}
-
-int
-_func_loader(void *lib) {
-    /*
-     * Fill global function pointers from dynamic lib.
-     * Return 1 if any pointer is NULL, 0 otherwise.
-     */
-
-    if ((TCL_CREATE_COMMAND = (Tcl_CreateCommand_t)_dfunc(lib, "Tcl_CreateCommand")) ==
-        NULL) {
-        return 1;
-    }
-    if ((TCL_APPEND_RESULT = (Tcl_AppendResult_t)_dfunc(lib, "Tcl_AppendResult")) ==
-        NULL) {
-        return 1;
-    }
-    if ((TK_PHOTO_GET_IMAGE = (Tk_PhotoGetImage_t)_dfunc(lib, "Tk_PhotoGetImage")) ==
-        NULL) {
-        return 1;
-    }
-    if ((TK_FIND_PHOTO = (Tk_FindPhoto_t)_dfunc(lib, "Tk_FindPhoto")) == NULL) {
-        return 1;
-    }
-    return (
-        (TK_PHOTO_PUT_BLOCK = (Tk_PhotoPutBlock_t)_dfunc(lib, "Tk_PhotoPutBlock")) ==
-        NULL
-    );
-}
-
-int
-load_tkinter_funcs(void) {
-    /*
-     * Load tkinter global funcs from tkinter compiled module.
-     * Return 0 for success, non-zero for failure.
-     */
-
-    int ret = -1;
-    void *main_program, *tkinter_lib;
-    char *tkinter_libname;
-    PyObject *pModule = NULL, *pString = NULL, *pBytes = NULL;
-
-    /* Try loading from the main program namespace first */
-    main_program = dlopen(NULL, RTLD_LAZY);
-    if (_func_loader(main_program) == 0) {
-        dlclose(main_program);
-        return 0;
-    }
-    /* Clear exception triggered when we didn't find symbols above */
-    PyErr_Clear();
-
-    /* Now try finding the tkinter compiled module */
-    pModule = PyImport_ImportModule(TKINTER_FINDER);
-    if (pModule == NULL) {
-        goto exit;
-    }
-    pString = PyObject_GetAttrString(pModule, "TKINTER_LIB");
-    if (pString == NULL) {
-        goto exit;
-    }
-    /* From module __file__ attribute to char *string for dlopen. */
-    pBytes = PyUnicode_EncodeFSDefault(pString);
-    if (pBytes == NULL) {
-        goto exit;
-    }
-    tkinter_libname = PyBytes_AsString(pBytes);
-    if (tkinter_libname == NULL) {
-        goto exit;
-    }
-    tkinter_lib = dlopen(tkinter_libname, RTLD_LAZY);
-    if (tkinter_lib == NULL) {
-        PyErr_SetString(PyExc_RuntimeError, "Cannot dlopen tkinter module file");
-        goto exit;
-    }
-    ret = _func_loader(tkinter_lib);
-    /* dlclose probably safe because tkinter has been imported. */
-    dlclose(tkinter_lib);
-exit:
-    dlclose(main_program);
-    Py_XDECREF(pModule);
-    Py_XDECREF(pString);
-    Py_XDECREF(pBytes);
-    return ret;
+    return 0;
 }
-#endif /* end not Windows */
