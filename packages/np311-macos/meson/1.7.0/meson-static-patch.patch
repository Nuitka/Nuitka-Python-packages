diff --git a/mesonbuild/build.py b/mesonbuild/build.py
index c72857d..16094d1 100644
--- a/mesonbuild/build.py
+++ b/mesonbuild/build.py
@@ -2180,7 +2180,10 @@ class StaticLibrary(BuildTarget):
                 if 'c' in self.compilers and self.compilers['c'].get_id() == 'tasking':
                     self.suffix = 'ma' if self.options.get_value('b_lto') and not self.prelink else 'a'
                 else:
-                    self.suffix = 'a'
+                    if self.environment.machines[self.for_machine].is_windows():
+                        self.suffix = 'lib'
+                    else:
+                        self.suffix = 'a'
         self.filename = self.prefix + self.name + '.' + self.suffix
         self.outputs[0] = self.filename
 
@@ -2248,6 +2251,8 @@ class SharedLibrary(BuildTarget):
             environment: environment.Environment,
             compilers: T.Dict[str, 'Compiler'],
             kwargs):
+        raise NotImplementedError("SharedLibrary builds not allowed on Nuitka-Python!")
+
         self.soversion: T.Optional[str] = None
         self.ltversion: T.Optional[str] = None
         # Max length 2, first element is compatibility_version, second is current_version
diff --git a/mesonbuild/cmake/toolchain.py b/mesonbuild/cmake/toolchain.py
index 9eb961c..ffa9f89 100644
--- a/mesonbuild/cmake/toolchain.py
+++ b/mesonbuild/cmake/toolchain.py
@@ -174,6 +174,8 @@ class CMakeToolchain:
 
         # Set the compiler variables
         for lang, comp_obj in self.compilers.items():
+            if lang == 'cython':
+                continue
             prefix = 'CMAKE_{}_'.format(language_map.get(lang, lang.upper()))
 
             exe_list = comp_obj.get_exelist()
@@ -210,7 +212,7 @@ class CMakeToolchain:
         # Generate the CMakeLists.txt
         mlog.debug('CMake Toolchain: Calling CMake once to generate the compiler state')
         languages = list(self.compilers.keys())
-        lang_ids = [language_map.get(x, x.upper()) for x in languages]
+        lang_ids = [language_map.get(x, x.upper()) for x in languages if x != 'cython']
         cmake_content = dedent(f'''
             cmake_minimum_required(VERSION 3.10)
             project(CompInfo {' '.join(lang_ids)})
diff --git a/mesonbuild/dependencies/python.py b/mesonbuild/dependencies/python.py
index 326e605..aa19f83 100644
--- a/mesonbuild/dependencies/python.py
+++ b/mesonbuild/dependencies/python.py
@@ -217,7 +217,7 @@ class _PythonDependencyBase(_Base):
             verdot = self.variables.get('py_version_short')
             imp_lower = self.variables.get('implementation_lower', 'python')
             if self.static:
-                libpath = Path('libs') / f'libpython{vernum}.a'
+                libpath = Path('libs') / f'python{vernum}.lib'
             else:
                 if limited_api:
                     vernum = vernum[0]
diff --git a/mesonbuild/modules/python.py b/mesonbuild/modules/python.py
index 1b7a056..198aa30 100644
--- a/mesonbuild/modules/python.py
+++ b/mesonbuild/modules/python.py
@@ -10,7 +10,7 @@ from . import ExtensionModule, ModuleInfo
 from .. import mesonlib
 from .. import mlog
 from ..options import UserFeatureOption
-from ..build import known_shmod_kwargs, CustomTarget, CustomTargetIndex, BuildTarget, GeneratedList, StructuredSources, ExtractedObjects, SharedModule
+from ..build import known_shmod_kwargs, CustomTarget, CustomTargetIndex, BuildTarget, GeneratedList, StructuredSources, ExtractedObjects, SharedModule, StaticLibrary
 from ..dependencies import NotFoundDependency
 from ..dependencies.detect import get_dep_identifier, find_external_dependency
 from ..dependencies.python import BasicPythonExternalProgram, python_factory, _PythonDependencyBase
@@ -230,7 +230,7 @@ class PythonInstallation(_ExternalProgramHolder['PythonExternalProgram']):
                 (self.is_pypy or mesonlib.version_compare(self.version, '>=3.9')):
             kwargs['gnu_symbol_visibility'] = 'inlineshidden'
 
-        return self.interpreter.build_target(self.current_node, args, kwargs, SharedModule)
+        return self.interpreter.build_target(self.current_node, args, kwargs, StaticLibrary)
 
     def _convert_api_version_to_py_version_hex(self, api_version: str, detected_version: str) -> str:
         python_api_version_format = re.compile(r'[0-9]\.[0-9]{1,2}')
diff --git a/mesonbuild/modules/python3.py b/mesonbuild/modules/python3.py
index 2e6779a..20068d6 100644
--- a/mesonbuild/modules/python3.py
+++ b/mesonbuild/modules/python3.py
@@ -10,7 +10,7 @@ from .. import mesonlib
 from . import ExtensionModule, ModuleInfo
 from ..build import (
     BuildTarget, CustomTarget, CustomTargetIndex, ExtractedObjects,
-    GeneratedList, SharedModule, StructuredSources, known_shmod_kwargs
+    GeneratedList, SharedModule, StaticLibrary, StructuredSources, known_shmod_kwargs
 )
 from ..interpreter.type_checking import SHARED_MOD_KWS
 from ..interpreterbase import typed_kwargs, typed_pos_args, noPosargs, noKwargs, permittedKwargs
@@ -53,7 +53,7 @@ class Python3Module(ExtensionModule):
             suffix = []
         kwargs['name_prefix'] = ''
         kwargs['name_suffix'] = suffix
-        return self.interpreter.build_target(state.current_node, args, kwargs, SharedModule)
+        return self.interpreter.build_target(state.current_node, args, kwargs, StaticLibrary)
 
     @noPosargs
     @noKwargs
