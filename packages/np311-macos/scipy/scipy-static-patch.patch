diff --git a/benchmarks/benchmarks/tests/__init__.py b/benchmarks/benchmarks/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/_lib/array_api_compat/array_api_compat/dask/__init__.py b/scipy/_lib/array_api_compat/array_api_compat/dask/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/_lib/array_api_compat/vendor_test/__init__.py b/scipy/_lib/array_api_compat/vendor_test/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/_lib/array_api_compat/vendor_test/vendored/__init__.py b/scipy/_lib/array_api_compat/vendor_test/vendored/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/_lib/boost_math/doc/graphs/hypergeometric_1f1/.boost-no-inspect b/scipy/_lib/boost_math/doc/graphs/hypergeometric_1f1/.boost-no-inspect
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/_lib/cobyqa/cobyqa/tests/__init__.py b/scipy/_lib/cobyqa/cobyqa/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/_lib/cobyqa/cobyqa/utils/tests/__init__.py b/scipy/_lib/cobyqa/cobyqa/utils/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/_lib/meson.build b/scipy/_lib/meson.build
index 8c7f56c..79afd53 100644
--- a/scipy/_lib/meson.build
+++ b/scipy/_lib/meson.build
@@ -42,15 +42,6 @@ py3.extension_module('_ccallback_c',
   subdir: 'scipy/_lib'
 )
 
-py3.extension_module('_test_ccallback',
-  'src/_test_ccallback.c',
-  dependencies: ccallback_dep,
-  link_args: version_link_args,
-  install: true,
-  subdir: 'scipy/_lib',
-  install_tag: 'tests'
-)
-
 py3.extension_module('_fpumode',
   '_fpumode.c',
   include_directories: 'src',
@@ -59,26 +50,6 @@ py3.extension_module('_fpumode',
   subdir: 'scipy/_lib'
 )
 
-py3.extension_module('_test_deprecation_call',
-  cython_gen.process('_test_deprecation_call.pyx'),
-  c_args: cython_c_args,
-  include_directories: 'src',
-  link_args: version_link_args,
-  install: true,
-  subdir: 'scipy/_lib',
-  install_tag: 'tests'
-)
-
-py3.extension_module('_test_deprecation_def',
-  cython_gen.process('_test_deprecation_def.pyx'),
-  c_args: cython_c_args,
-  include_directories: 'src',
-  link_args: version_link_args,
-  install: true,
-  subdir: 'scipy/_lib',
-  install_tag: 'tests'
-)
-
 # May be easier as a compile flag, but use a config header file to stay
 # in sync with what is done in setup.py
 # TODO: the `prefix` here is recommended in
diff --git a/scipy/_lib/tests/__init__.py b/scipy/_lib/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/cluster/tests/__init__.py b/scipy/cluster/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/constants/tests/__init__.py b/scipy/constants/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/datasets/tests/__init__.py b/scipy/datasets/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/fft/_pocketfft/tests/__init__.py b/scipy/fft/_pocketfft/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/fft/tests/__init__.py b/scipy/fft/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/fftpack/tests/__init__.py b/scipy/fftpack/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/integrate/_ivp/tests/__init__.py b/scipy/integrate/_ivp/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/integrate/meson.build b/scipy/integrate/meson.build
index 206d504..a5d057a 100644
--- a/scipy/integrate/meson.build
+++ b/scipy/integrate/meson.build
@@ -82,7 +82,7 @@ py3.extension_module('_odepack',
 py3.extension_module('_vode',
   f2py_gen.process('vode.pyf'),
   link_with: [vode_lib],
-  c_args: [Wno_unused_variable],
+  c_args: [Wno_unused_variable, '-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_vode'],
   link_args: version_link_args,
   dependencies: [lapack_dep, blas_dep, fortranobject_dep],
   install: true,
@@ -93,7 +93,7 @@ py3.extension_module('_vode',
 py3.extension_module('_lsoda',
   f2py_gen.process('lsoda.pyf'),
   link_with: [lsoda_lib, mach_lib],
-  c_args: [Wno_unused_variable],
+  c_args: [Wno_unused_variable, '-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_vode'],
   dependencies: [lapack_dep, fortranobject_dep],
   link_args: version_link_args,
   install: true,
@@ -104,7 +104,7 @@ py3.extension_module('_lsoda',
 py3.extension_module('_dop',
   f2py_gen.process('dop.pyf'),
   link_with: [dop_lib],
-  c_args: [Wno_unused_variable],
+  c_args: [Wno_unused_variable, '-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_dop'],
   dependencies: [fortranobject_dep],
   link_args: version_link_args,
   install: true,
@@ -112,26 +112,6 @@ py3.extension_module('_dop',
   subdir: 'scipy/integrate'
 )
 
-py3.extension_module('_test_multivariate',
-  [quadpack_test_src],
-  link_args: version_link_args,
-  install: true,
-  subdir: 'scipy/integrate',
-  install_tag: 'tests'
-)
-
-py3.extension_module('_test_odeint_banded',
-  ['tests/banded5x5.f', f2py_gen.process('tests/test_odeint_banded.pyf')],
-  link_with: [lsoda_lib, mach_lib],
-  fortran_args: _fflag_Wno_unused_dummy_argument,
-  link_args: version_link_args,
-  dependencies: [lapack_dep, fortranobject_dep],
-  install: true,
-  link_language: 'fortran',
-  subdir: 'scipy/integrate',
-  install_tag: 'tests'
-)
-
 subdir('_ivp')
 subdir('_rules')
 subdir('tests')
diff --git a/scipy/integrate/tests/__init__.py b/scipy/integrate/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/interpolate/meson.build b/scipy/interpolate/meson.build
index 72e2d20..710eb04 100644
--- a/scipy/interpolate/meson.build
+++ b/scipy/interpolate/meson.build
@@ -165,7 +165,7 @@ py3.extension_module('_fitpack',
 # TODO: Add flags for 64 bit ints
 py3.extension_module('_dfitpack',
   f2py_gen.process('src/dfitpack.pyf'),
-  c_args: [Wno_unused_variable],
+  c_args: [Wno_unused_variable, '-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_dfitpack'],
   link_args: version_link_args,
   dependencies: [lapack_dep, fortranobject_dep],
   link_with: [fitpack_lib],
diff --git a/scipy/interpolate/tests/__init__.py b/scipy/interpolate/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/io/_harwell_boeing/tests/__init__.py b/scipy/io/_harwell_boeing/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/io/arff/tests/__init__.py b/scipy/io/arff/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/io/matlab/tests/__init__.py b/scipy/io/matlab/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/io/meson.build b/scipy/io/meson.build
index 60f71c6..af04022 100644
--- a/scipy/io/meson.build
+++ b/scipy/io/meson.build
@@ -1,18 +1,3 @@
-py3.extension_module('_test_fortran',
-  [
-    f2py_gen.process('test_fortran.pyf'),
-    '_test_fortran.f'
-  ],
-  c_args: [Wno_unused_variable],
-  fortran_args: fortran_ignore_warnings,
-  link_args: version_link_args,
-  dependencies: [lapack_dep, fortranobject_dep],
-  install: true,
-  link_language: 'fortran',
-  subdir: 'scipy/io',
-  install_tag: 'tests'
-)
-
 py3.install_sources([
     '__init__.py',
     '_fortran.py',
diff --git a/scipy/io/tests/__init__.py b/scipy/io/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/linalg/meson.build b/scipy/linalg/meson.build
index 95925a7..5f7265e 100644
--- a/scipy/linalg/meson.build
+++ b/scipy/linalg/meson.build
@@ -68,6 +68,7 @@ py3.extension_module('_fblas',
   fblas_module,
   link_args: version_link_args,
   dependencies: [lapack_dep, blas_dep, fortranobject_dep],
+  c_args: ['-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_fblas'],
   install: true,
   subdir: 'scipy/linalg'
 )
@@ -94,7 +95,7 @@ flapack_module = custom_target('flapack_module',
 # in flapack_other.pyf.src
 py3.extension_module('_flapack',
   flapack_module,
-  c_args: [Wno_empty_body],
+  c_args: [Wno_empty_body, '-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_dfitpack'],
   link_args: version_link_args,
   dependencies: [lapack_dep, blas_dep, fortranobject_dep],
   install: true,
diff --git a/scipy/linalg/tests/__init__.py b/scipy/linalg/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/meson.build b/scipy/meson.build
index 73168d8..52c193c 100644
--- a/scipy/meson.build
+++ b/scipy/meson.build
@@ -144,9 +144,12 @@ fortranobject_lib = static_library('_fortranobject',
   dependencies: py3_dep,
   include_directories: [inc_np, inc_f2py],
   gnu_symbol_visibility: 'hidden',
+  install: true,
+  install_dir: py3.get_install_dir() / 'scipy',
 )
 fortranobject_dep = declare_dependency(
-  link_with: fortranobject_lib,
+  compile_args: numpy_nodepr_api,
+  dependencies: py3_dep,
   include_directories: [inc_np, inc_f2py],
 )
 
diff --git a/scipy/ndimage/meson.build b/scipy/ndimage/meson.build
index 82f64f6..96c76ba 100644
--- a/scipy/ndimage/meson.build
+++ b/scipy/ndimage/meson.build
@@ -42,16 +42,6 @@ py3.extension_module('_ctest',
   install_tag: 'tests'
 )
 
-py3.extension_module('_cytest',
-  cython_gen.process('src/_cytest.pyx'),
-  c_args: cython_c_args,
-  dependencies: np_dep,
-  link_args: version_link_args,
-  install: true,
-  subdir: 'scipy/ndimage',
-  install_tag: 'tests'
-)
-
 
 python_sources = [
   '__init__.py',
diff --git a/scipy/odr/tests/__init__.py b/scipy/odr/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/optimize/_shgo_lib/__init__.py b/scipy/optimize/_shgo_lib/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/optimize/_trustregion_constr/tests/__init__.py b/scipy/optimize/_trustregion_constr/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/optimize/meson.build b/scipy/optimize/meson.build
index 519755e..5b31a60 100644
--- a/scipy/optimize/meson.build
+++ b/scipy/optimize/meson.build
@@ -87,7 +87,7 @@ py3.extension_module('_moduleTNC',
 
 py3.extension_module('_cobyla',
   [f2py_gen.process('cobyla/cobyla.pyf'), 'cobyla/cobyla2.f', 'cobyla/trstlp.f'],
-  c_args: [Wno_unused_variable],
+  c_args: [Wno_unused_variable, '-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_cobyla'],
   fortran_args: fortran_ignore_warnings,
   link_args: version_link_args,
   dependencies: [fortranobject_dep],
@@ -101,6 +101,7 @@ py3.extension_module('_slsqp',
   fortran_args: fortran_ignore_warnings,
   link_args: version_link_args,
   dependencies: [fortranobject_dep],
+  c_args: ['-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_slsqp'],
   install: true,
   link_language: 'fortran',
   subdir: 'scipy/optimize'
diff --git a/scipy/optimize/tests/__init__.py b/scipy/optimize/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/signal/tests/__init__.py b/scipy/signal/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/csgraph/tests/__init__.py b/scipy/sparse/csgraph/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/linalg/_dsolve/tests/__init__.py b/scipy/sparse/linalg/_dsolve/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/linalg/_eigen/arpack/tests/__init__.py b/scipy/sparse/linalg/_eigen/arpack/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/linalg/_eigen/lobpcg/tests/__init__.py b/scipy/sparse/linalg/_eigen/lobpcg/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/linalg/_eigen/tests/__init__.py b/scipy/sparse/linalg/_eigen/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/linalg/_isolve/tests/__init__.py b/scipy/sparse/linalg/_isolve/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/linalg/_propack/meson.build b/scipy/sparse/linalg/_propack/meson.build
index d33cdc0..080cfd8 100644
--- a/scipy/sparse/linalg/_propack/meson.build
+++ b/scipy/sparse/linalg/_propack/meson.build
@@ -96,13 +96,13 @@ foreach ele: elements
       _fflag_Wno_uninitialized,
       _fflag_fpp,
     ],
-    gnu_symbol_visibility: 'hidden',
+    gnu_symbol_visibility: 'hidden'
   )
 
   propacklib = py3.extension_module(ele[0],
     f2py_gen.process(ele[2]),
     link_with: propack_lib,
-    c_args: ['-U_OPENMP', _cpp_Wno_cpp],
+    c_args: ['-U_OPENMP', _cpp_Wno_cpp, '-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_' + ele[0]],
     fortran_args: _fflag_Wno_maybe_uninitialized,
     dependencies: [lapack_dep, blas_dep, fortranobject_dep],
     link_args: version_link_args,
diff --git a/scipy/sparse/linalg/tests/__init__.py b/scipy/sparse/linalg/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/sparse/tests/__init__.py b/scipy/sparse/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/spatial/tests/__init__.py b/scipy/spatial/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/spatial/transform/tests/__init__.py b/scipy/spatial/transform/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/special/_ellip_harm_2.pyx b/scipy/special/_ellip_harm_2.pyx
index e9295c2..8196e88 100644
--- a/scipy/special/_ellip_harm_2.pyx
+++ b/scipy/special/_ellip_harm_2.pyx
@@ -188,12 +188,4 @@ cimport numpy as np
 np.import_array()
 np.import_ufunc()
 
-cdef extern from "numpy/ufuncobject.h":
-    int PyUFunc_getfperr() nogil
-
-cdef public int wrap_PyUFunc_getfperr() noexcept nogil:
-    """
-    Call PyUFunc_getfperr in a context where PyUFunc_API array is initialized;
-    this avoids messing with the UNIQUE_SYMBOL #defines
-    """
-    return PyUFunc_getfperr()
+
diff --git a/scipy/special/_precompute/__init__.py b/scipy/special/_precompute/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/special/_ufuncs_extra_code_common.pxi b/scipy/special/_ufuncs_extra_code_common.pxi
index 8e1ff08..ce867bc 100644
--- a/scipy/special/_ufuncs_extra_code_common.pxi
+++ b/scipy/special/_ufuncs_extra_code_common.pxi
@@ -9,15 +9,7 @@ from numpy cimport (
 
 ctypedef double complex double_complex
 
-cdef extern from "numpy/ufuncobject.h":
-    int PyUFunc_getfperr() nogil
 
-cdef public int wrap_PyUFunc_getfperr() noexcept nogil:
-    """
-    Call PyUFunc_getfperr in a context where PyUFunc_API array is initialized;
-    this avoids messing with the UNIQUE_SYMBOL #defines
-    """
-    return PyUFunc_getfperr()
 
 cimport libc
 
diff --git a/scipy/special/meson.build b/scipy/special/meson.build
index 3c42247..a06e33d 100644
--- a/scipy/special/meson.build
+++ b/scipy/special/meson.build
@@ -25,18 +25,12 @@ _ufuncs_pxi_pxd_sources = [
   fs.copyfile('_ufuncs_extra_code_common.pxi'),
 ]
 
-if meson.get_compiler('cpp').get_id() in ['msvc', 'clang-cl', 'intel-cl']
-  scipy_export_dll_args = ['-DSCIPY_DLL_EXPORTS']
-  scipy_import_dll_args = ['-DSCIPY_DLL_IMPORTS']
-else
-  scipy_export_dll_args = []
-  scipy_import_dll_args = []
-endif
+scipy_export_dll_args = []
+scipy_import_dll_args = []
 
-sf_error_state_lib = shared_library('sf_error_state',
+sf_error_state_lib = static_library('sf_error_state',
   ['sf_error_state.c'],
   include_directories: ['../_lib', '../_build_utils/src'],
-  c_args: scipy_export_dll_args,
   install: true,
   install_dir: py3.get_install_dir() / 'scipy/special',
 )
@@ -81,7 +75,7 @@ py3.extension_module('_special_ufuncs',
   include_directories: ['../_lib', '../_build_utils/src'],
   dependencies: [np_dep, sf_error_state_dep],
   link_args: version_link_args,
-  cpp_args: ufuncs_cpp_args,
+  cpp_args: ufuncs_cpp_args + ['-DDEFINE_chbevl', '-DDEFINE_rgamma', '-DDEFINE_k1e', '-DDEFINE_psi', '-DDEFINE_expi', '-DDEFINE_lanczos', '-DDEFINE_igami', '-DDEFINE_loggamma', '-DDEFINE_hys2f1', '-DDEFINE_xsf_hyp2f1', '-DDEFINE_struve', '-DDEFINE_numbers', '-DDEFINE_xsf_numpy'],
   install: true,
   subdir: 'scipy/special',
   install_rpath: '$ORIGIN'
@@ -234,22 +228,6 @@ py3.extension_module('_comb',
   subdir: 'scipy/special'
 )
 
-py3.extension_module('_test_internal',
-  [cython_gen.process('_test_internal.pyx'), 'dd_real_wrappers.cpp'],
-  include_directories: ['../_lib', '../_build_utils/src'],
-  dependencies: [np_dep],
-  link_args: version_link_args,
-  install: true,
-  subdir: 'scipy/special',
-  install_tag: 'tests'
-)
-
-py3.install_sources(
-  '_test_internal.pyi',
-  subdir: 'scipy/special',
-  install_tag: 'tests'
-)
-
 # Must use `custom_target`, because `py3.install_sources` does not work with
 # generated sources - see https://github.com/mesonbuild/meson/issues/7372
 npz_files = [
diff --git a/scipy/special/tests/__init__.py b/scipy/special/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/special/tests/data/__init__.py b/scipy/special/tests/data/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/special/xsf/cephes/chbevl.h b/scipy/special/xsf/cephes/chbevl.h
index caaa74f..3f13222 100644
--- a/scipy/special/xsf/cephes/chbevl.h
+++ b/scipy/special/xsf/cephes/chbevl.h
@@ -63,6 +63,7 @@
 namespace xsf {
 namespace cephes {
 
+#ifdef DEFINE_chbevl
     XSF_HOST_DEVICE double chbevl(double x, const double array[], int n) {
         double b0, b1, b2;
         const double *p;
@@ -81,5 +82,8 @@ namespace cephes {
 
         return (0.5 * (b0 - b2));
     }
+#else
+    XSF_HOST_DEVICE double chbevl(double x, const double array[], int n);
+#endif
 } // namespace cephes
 } // namespace xsf
diff --git a/scipy/special/xsf/cephes/hyp2f1.h b/scipy/special/xsf/cephes/hyp2f1.h
index f9ec54b..12060f0 100644
--- a/scipy/special/xsf/cephes/hyp2f1.h
+++ b/scipy/special/xsf/cephes/hyp2f1.h
@@ -90,6 +90,7 @@ namespace cephes {
         /* hys2f1 and hyp2f1ra depend on each other, so we need this prototype */
         XSF_HOST_DEVICE double hyp2f1ra(double a, double b, double c, double x, double *loss);
 
+#ifdef DEFINE_hys2f1
         /* Defining power series expansion of Gauss hypergeometric function */
         /* The `loss` parameter estimates loss of significance */
         XSF_HOST_DEVICE double hys2f1(double a, double b, double c, double x, double *loss) {
@@ -411,8 +412,15 @@ namespace cephes {
 
             return f0;
         }
+#else
+    XSF_HOST_DEVICE double hys2f1(double a, double b, double c, double x, double *loss);
+    XSF_HOST_DEVICE double hyt2f1(double a, double b, double c, double x, double *loss);
+    XSF_HOST_DEVICE double hyp2f1_neg_c_equal_bc(double a, double b, double x);
+    XSF_HOST_DEVICE double hyp2f1ra(double a, double b, double c, double x, double *loss);
+#endif
     } // namespace detail
 
+#ifdef DEFINE_hys2f1
     XSF_HOST_DEVICE double hyp2f1(double a, double b, double c, double x) {
         double d, d1, d2, e;
         double p, q, r, s, y, ax;
@@ -591,6 +599,9 @@ namespace cephes {
         set_error("hyp2f1", SF_ERROR_OVERFLOW, NULL);
         return std::numeric_limits<double>::infinity();
     }
+#else
+    XSF_HOST_DEVICE double hyp2f1(double a, double b, double c, double x);
+#endif
 
 } // namespace cephes
 } // namespace xsf
diff --git a/scipy/special/xsf/cephes/igami.h b/scipy/special/xsf/cephes/igami.h
index ff82c35..df828f9 100644
--- a/scipy/special/xsf/cephes/igami.h
+++ b/scipy/special/xsf/cephes/igami.h
@@ -23,6 +23,7 @@ namespace cephes {
 
     namespace detail {
 
+#ifdef DEFINE_igami
         XSF_HOST_DEVICE double find_inverse_s(double p, double q) {
             /*
              * Computation of the Incomplete Gamma Function Ratios and their Inverse
@@ -46,6 +47,9 @@ namespace cephes {
                 s = -s;
             return s;
         }
+#else
+        XSF_HOST_DEVICE double find_inverse_s(double p, double q);
+#endif
 
         XSF_HOST_DEVICE inline double didonato_SN(double a, double x, unsigned N, double tolerance) {
             /*
diff --git a/scipy/special/xsf/cephes/k1.h b/scipy/special/xsf/cephes/k1.h
index 96594fd..820c634 100644
--- a/scipy/special/xsf/cephes/k1.h
+++ b/scipy/special/xsf/cephes/k1.h
@@ -139,6 +139,7 @@ namespace cephes {
         return (std::exp(-x) * chbevl(8.0 / x - 2.0, detail::k1_B, 25) / std::sqrt(x));
     }
 
+#ifdef DEFINE_k1e
     XSF_HOST_DEVICE double k1e(double x) {
         double y;
 
@@ -158,6 +159,9 @@ namespace cephes {
 
         return (chbevl(8.0 / x - 2.0, detail::k1_B, 25) / std::sqrt(x));
     }
+#else
+    XSF_HOST_DEVICE double k1e(double x);
+#endif
 
 } // namespace cephes
 } // namespace xsf
diff --git a/scipy/special/xsf/cephes/lanczos.h b/scipy/special/xsf/cephes/lanczos.h
index a8cbbe1..f11a59b 100644
--- a/scipy/special/xsf/cephes/lanczos.h
+++ b/scipy/special/xsf/cephes/lanczos.h
@@ -80,6 +80,7 @@ namespace cephes {
             -0.5926941084905061794445733628891024027949,    4.408830289125943377923077727900630927902,
             -9.8907772644920670589288081640128194231,       6.565936202082889535528455955485877361223};
 
+#ifdef DEFINE_lanczos
         XSF_HOST_DEVICE double lanczos_sum(double x) { return ratevl(x, lanczos_num, 12, lanczos_denom, 12); }
 
         XSF_HOST_DEVICE double lanczos_sum_near_1(double dx) {
@@ -102,11 +103,20 @@ namespace cephes {
             }
             return result;
         }
+#else
+        XSF_HOST_DEVICE double lanczos_sum(double x);
+        XSF_HOST_DEVICE double lanczos_sum_near_1(double dx);
+        XSF_HOST_DEVICE double lanczos_sum_near_2(double dx);
+#endif
     } // namespace detail
 
     constexpr double lanczos_g = 6.024680040776729583740234375;
+#ifdef DEFINE_lanczos
     XSF_HOST_DEVICE double lanczos_sum_expg_scaled(double x) {
         return ratevl(x, detail::lanczos_sum_expg_scaled_num, 12, detail::lanczos_sum_expg_scaled_denom, 12);
     }
+#else
+    XSF_HOST_DEVICE double lanczos_sum_expg_scaled(double x);
+#endif
 } // namespace cephes
 } // namespace xsf
diff --git a/scipy/special/xsf/cephes/psi.h b/scipy/special/xsf/cephes/psi.h
index c028e9e..54298ef 100644
--- a/scipy/special/xsf/cephes/psi.h
+++ b/scipy/special/xsf/cephes/psi.h
@@ -97,6 +97,7 @@ namespace cephes {
                                     2.0767117023730469,
                                     1.0};
 
+#ifdef DEFINE_psi
         XSF_HOST_DEVICE double digamma_imp_1_2(double x) {
             /*
              * Rational approximation on [1, 2] taken from Boost.
@@ -134,8 +135,13 @@ namespace cephes {
 
             return std::log(x) - (0.5 / x) - y;
         }
+#else
+        XSF_HOST_DEVICE double digamma_imp_1_2(double x);
+        XSF_HOST_DEVICE double psi_asy(double x);
+#endif
     } // namespace detail
 
+#ifdef DEFINE_psi
     XSF_HOST_DEVICE double psi(double x) {
         double y = 0.0;
         double q, r;
@@ -190,5 +196,8 @@ namespace cephes {
         y += detail::psi_asy(x);
         return y;
     }
+#else
+        XSF_HOST_DEVICE double psi(double x);
+#endif
 } // namespace cephes
 } // namespace xsf
diff --git a/scipy/special/xsf/cephes/rgamma.h b/scipy/special/xsf/cephes/rgamma.h
index 97f29b3..b8589bc 100644
--- a/scipy/special/xsf/cephes/rgamma.h
+++ b/scipy/special/xsf/cephes/rgamma.h
@@ -71,6 +71,7 @@ namespace cephes {
 
     } // namespace detail
 
+#ifdef DEFINE_rgamma
     XSF_HOST_DEVICE double rgamma(double x) {
         double w, y, z;
 
@@ -107,5 +108,8 @@ namespace cephes {
         y = w * (1.0 + chbevl(4.0 * w - 2.0, detail::rgamma_R, 16)) / z;
         return (y);
     }
+#else
+    XSF_HOST_DEVICE double rgamma(double x);
+#endif
 } // namespace cephes
 } // namespace xsf
diff --git a/scipy/special/xsf/expint.h b/scipy/special/xsf/expint.h
index 600448a..fe780b4 100644
--- a/scipy/special/xsf/expint.h
+++ b/scipy/special/xsf/expint.h
@@ -155,7 +155,8 @@ XSF_HOST_DEVICE inline double expi(double x) {
 }
 
 XSF_HOST_DEVICE inline float expi(float x) { return expi(static_cast<double>(x)); }
-    
+
+#ifdef DEFINE_expi
 std::complex<double> expi(std::complex<double> z) {
     // ============================================
     // Purpose: Compute exponential integral Ei(x)
@@ -176,6 +177,9 @@ std::complex<double> expi(std::complex<double> z) {
     }
     return cei;
 }
+#else
+std::complex<double> expi(std::complex<double> z);
+#endif
 
 
 XSF_HOST_DEVICE inline std::complex<float> expi(std::complex<float> z) {
diff --git a/scipy/special/xsf/hyp2f1.h b/scipy/special/xsf/hyp2f1.h
index a575b4d..bc7b863 100644
--- a/scipy/special/xsf/hyp2f1.h
+++ b/scipy/special/xsf/hyp2f1.h
@@ -463,6 +463,7 @@ namespace detail {
         std::complex<double> z_, Z_;
     };
 
+#ifdef DEFINE_xsf_hyp2f1
     XSF_HOST_DEVICE std::complex<double> hyp2f1_transform1_limiting_case(double a, double b, double c, double m,
                                                                              std::complex<double> z) {
         /* 1 - z transform in limiting case where c - a - b approaches an integer m. */
@@ -516,6 +517,12 @@ namespace detail {
                   series_eval(series_generator2, std::complex<double>{0.0, 0.0}, hyp2f1_EPS, hyp2f1_MAXITER, "hyp2f1");
         return result;
     }
+#else
+    XSF_HOST_DEVICE std::complex<double> hyp2f1_transform1_limiting_case(double a, double b, double c, double m,
+                                                                             std::complex<double> z);
+    XSF_HOST_DEVICE std::complex<double> hyp2f1_transform2_limiting_case(double a, double b, double c, double m,
+                                                                             std::complex<double> z);
+#endif
 
 } // namespace detail
 
diff --git a/scipy/special/xsf/loggamma.h b/scipy/special/xsf/loggamma.h
index eaae479..0f4d8d8 100644
--- a/scipy/special/xsf/loggamma.h
+++ b/scipy/special/xsf/loggamma.h
@@ -38,6 +38,7 @@ namespace detail {
     constexpr double loggamma_LOGPI = 1.1447298858494001741434262; // log(pi)
     constexpr double loggamma_TAYLOR_RADIUS = 0.2;
 
+#ifdef DEFINE_loggamma
     XSF_HOST_DEVICE std::complex<double> loggamma_stirling(std::complex<double> z) {
         /* Stirling series for log-Gamma
          *
@@ -96,6 +97,11 @@ namespace detail {
         z -= 1.0;
         return z * cevalpoly(coeffs, 22, z);
     }
+#else
+    XSF_HOST_DEVICE std::complex<double> loggamma_stirling(std::complex<double> z);
+    XSF_HOST_DEVICE std::complex<double> loggamma_recurrence(std::complex<double> z);
+    XSF_HOST_DEVICE std::complex<double> loggamma_taylor(std::complex<double> z);
+#endif
 } // namespace detail
 
 XSF_HOST_DEVICE inline double loggamma(double x) {
diff --git a/scipy/special/xsf/numbers.h b/scipy/special/xsf/numbers.h
index da4e241..64971cb 100644
--- a/scipy/special/xsf/numbers.h
+++ b/scipy/special/xsf/numbers.h
@@ -8,11 +8,18 @@ namespace numbers {
     template <typename T>
     std::complex<T> i_v;
 
+#ifdef DEFINE_numbers
     template <>
     std::complex<float> i_v<float> = std::literals::complex_literals::operator""if(1.0L);
 
     template <>
     std::complex<double> i_v<double> = std::literals::complex_literals::operator""i(1.0L);
+#else
+    extern template
+    std::complex<float> i_v<float>;
+    extern template
+    std::complex<double> i_v<double>;
+#endif
 
 } // namespace numbers
 } // namespace xsf
diff --git a/scipy/special/xsf/numpy.h b/scipy/special/xsf/numpy.h
index ae07367..6908344 100644
--- a/scipy/special/xsf/numpy.h
+++ b/scipy/special/xsf/numpy.h
@@ -24,11 +24,12 @@
 /* PyUFunc_getfperr gets bits for current floating point error (fpe) status codes so we
  * can check for floating point errors and make proper calls to set_error in ufunc loops.
  * Define a wrapper so it can be given C linkage within this C++ header. */
-extern "C" int wrap_PyUFunc_getfperr() { return PyUFunc_getfperr(); }
+extern "C" int wrap_PyUFunc_getfperr(); // { return PyUFunc_getfperr(); }
 
 namespace xsf {
 namespace numpy {
 
+#ifdef DEFINE_xsf_numpy
     void set_error_check_fpe(const char *func_name) {
 	int status = wrap_PyUFunc_getfperr();
 	if (status & NPY_FPE_DIVIDEBYZERO) {
@@ -44,6 +45,9 @@ namespace numpy {
 	    xsf::set_error(func_name, SF_ERROR_DOMAIN, "floating point invalid value");
 	}
     }
+#else
+    void set_error_check_fpe(const char *func_name);
+#endif
 
     namespace detail {
 
@@ -958,6 +962,7 @@ namespace numpy {
         }
     };
 
+#ifdef DEFINE_xsf_numpy
     PyObject *ufunc(ufunc_overloads func, int nout, const char *name, const char *doc) {
         static std::vector<ufunc_overloads> ufuncs;
 
@@ -1008,6 +1013,17 @@ namespace numpy {
 
         return gufunc(std::move(overloads), nout, name, doc, signature, map_dims);
     }
+#else
+    PyObject *ufunc(ufunc_overloads func, int nout, const char *name, const char *doc);
+    PyObject *ufunc(ufunc_overloads overloads, const char *name, const char *doc);
+    PyObject *gufunc(
+        ufunc_overloads overloads, int nout, const char *name, const char *doc, const char *signature,
+        map_dims_type map_dims
+    );
+    PyObject *gufunc(
+        ufunc_overloads overloads, const char *name, const char *doc, const char *signature, map_dims_type map_dims
+    );
+#endif
 
     // rename to autodiff_var?
     template <typename T>
diff --git a/scipy/special/xsf/struve.h b/scipy/special/xsf/struve.h
index d9541aa..202ed1c 100644
--- a/scipy/special/xsf/struve.h
+++ b/scipy/special/xsf/struve.h
@@ -217,6 +217,7 @@ T itmodstruve0(T x) {
     return out;
 }
 
+#ifdef DEFINE_struve
 double struve_h(double v, double z) { return cephes::struve_h(v, z); }
 
 float struve_h(float v, float z) { return struve_h(static_cast<double>(v), static_cast<double>(z)); }
@@ -224,5 +225,11 @@ float struve_h(float v, float z) { return struve_h(static_cast<double>(v), stati
 double struve_l(double v, double z) { return cephes::struve_l(v, z); }
 
 float struve_l(float v, float z) { return struve_l(static_cast<double>(v), static_cast<double>(z)); }
+#else
+double struve_h(double v, double z);
+float struve_h(float v, float z);
+double struve_l(double v, double z);
+float struve_l(float v, float z);
+#endif
 
 } // namespace xsf
diff --git a/scipy/stats/_rcont/meson.build b/scipy/stats/_rcont/meson.build
index c57472f..3a015cc 100644
--- a/scipy/stats/_rcont/meson.build
+++ b/scipy/stats/_rcont/meson.build
@@ -8,8 +8,8 @@ py3.install_sources([
 py3.extension_module('rcont',
   [
     '_rcont.c',
-    '../libnpyrandom/logfactorial.c',
-    '../libnpyrandom/distributions.c',
+    #'../libnpyrandom/logfactorial.c',
+    #'../libnpyrandom/distributions.c',
   ],
   cython_gen.process('rcont.pyx'),
   include_directories: ['../libnpyrandom'],
diff --git a/scipy/stats/_unuran/__init__.py b/scipy/stats/_unuran/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/stats/_unuran/config.h b/scipy/stats/_unuran/config.h
deleted file mode 100644
index e69de29..0000000
diff --git a/scipy/stats/meson.build b/scipy/stats/meson.build
index a9f9365..99dd282 100644
--- a/scipy/stats/meson.build
+++ b/scipy/stats/meson.build
@@ -37,6 +37,7 @@ py3.extension_module('_mvn',
   # (see GCC bug 98411: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98411)
   fortran_args: [fortran_ignore_warnings, _fflag_Wno_surprising],
   dependencies: [fortranobject_dep],
+  c_args: ['-DPY_ARRAY_UNIQUE_SYMBOL=_npy_f2py_ARRAY_API_mvn'],
   link_args: version_link_args,
   install: true,
   link_language: 'fortran',
@@ -76,7 +77,7 @@ py3.extension_module('_biasedurn',
     'biasedurn/stoc3.cpp',
     'biasedurn/stocR.h',
     'biasedurn/wnchyppr.cpp',
-    'libnpyrandom/distributions.c',
+    #'libnpyrandom/distributions.c',
   ],
   cpp_args: ['-DR_BUILD', cython_cpp_args],
   include_directories: ['libnpyrandom'],
diff --git a/scipy/stats/tests/__init__.py b/scipy/stats/tests/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/subprojects/highs/docs/c_api_gen/HConfig.h b/subprojects/highs/docs/c_api_gen/HConfig.h
deleted file mode 100644
index 0f1329b..0000000
--- a/subprojects/highs/docs/c_api_gen/HConfig.h
+++ /dev/null
@@ -1 +0,0 @@
-// A dummy file to fix a warning when Julia parses the C API.
